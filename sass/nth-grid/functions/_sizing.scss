/// Work out the required size for the cell.
///
/// @param {Number|List} $layout - The single value/list to work out sizing.
/// @param {Number}      $index  - The position of the list to get the value from.
/// @param {Number}      $gutter - The gutter value to substract from the size.
///
/// @return {String}
///
@function -cell-size($layout, $index, $gutter) {

  // Total number of cells in our layout.
  // If this is a list this will be the list values added together,
  // otherwise its the single value supplied.
  $total: if(type-of($layout) == 'list', sum($layout), $layout);

  // Length of the list if applicable
  $length: length($layout);

  // Item from the list matching the given index
  $item: if(type-of($layout) == 'list', nth($layout, $index), 1);

  // All fractional (unitless) values within $layout
  $fractional: -filter-fractional($layout);

  // All values in $layout with units
  $static: -filter-static($layout, length($fractional), '-');

  // Gutter value to subtract from the calc() declaration
  $calc-gutter: if($gutter != 0, -calc-gutter($gutter, $layout), null);

  // Zero the size ready...
  $size: 0;

  // Shrink behaviour (auto width/height)
  @if $item == 0 {
    $size: auto;
  }

  // Values with units
  @else if not unitless($item) {
    @if $calc-gutter {
      $size: calc(#{$item} - #{$calc-gutter});
    }
    @else {
      $size: #{$item};
    }
  }

  // Values without units
  @else {
    @if $static {
      @if $calc-gutter {
        $size: calc(#{percentage($item / $total)} #{$static} - #{$calc-gutter});
      }
      @else {
        $size: calc(#{percentage($item / $total)} #{$static});
      }
    }
    @else {
      @if $calc-gutter {
        $size: calc(#{percentage($item / $total)} - #{$calc-gutter});
      }
      @else {
        $size: percentage($item / $total);
      }
    }
  }

  @return $size;
}
