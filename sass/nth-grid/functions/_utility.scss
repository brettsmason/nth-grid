/// Add unitless numbers from a list to form a total.
/// @link https://hugogiraudel.com/2013/10/09/advanced-sass-list-functions-again/
///
/// @param {List}    $list  - A list of values to add up.
/// @param {Boolean} $force - Enable / disable the removing of units.
///
/// @return {Number}
///
@function sum($list, $force: false) {
    $result: 0;

    @each $item in $list {
        @if type-of($item) == number {
            @if $force and unit($item) {
                $item: $item / ($item * 0 + 1);
            }
            @if unitless($item) {
                $result: $result + $item;
            }
        }
    }

    @return $result;
}

/// Repeat a value x number of times.
/// Mimics the browser function with the same name.
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/repeat
///
/// @param {Number}      $count - The number of times to repeat the $value.
/// @param {String|List} $value - The value(s) to repeat.
///
/// @return {List}
///
@function repeat($count, $value) {
    $list: ();

    @for $i from 1 through $count {
        $list: append($list, $value, space);
    }

    @return $list;
}

/// Sort a supplied list and return just the values with a unit.
///
/// @param {List}   $list      - A list of values.
/// @param {Number} $divide    - The value to divide each static value by (used by multi column multi unit grids).
/// @param {String} $separator - A value to insert between each value (eg -).
///
/// @return {List}
///
@function _filter-static($list) {
    $static: ();

    @each $value in $list {
        @if not unitless($value) {
            $static: append($static, $value);
        }
    }

    $static: if(length($static) > 0, $static, null);

    @return $static;
}

/// Sort a supplied list and return just the values without a unit.
///
/// @param {List} $list - A list of values.
///
/// @return {List}
///
@function _filter-fractional($list) {
    $fr: ();

    @each $value in $list {
        @if unitless($value) {
            $fr: append($fr, $value);
        }
    }

    $fr: if(length($fr) > 0, $fr, null);

    @return $fr;
}

/// Divide each value in a list by the given number.
///
/// @param {List}   $list   - A list of values.
/// @param {Number} $divide - The value to divide by.
///
@function _divide-values($list, $divide) {
    $values: ();

    @if type-of($list) == 'list' {
        @each $value in $values {
            $values: append($values, $value / $divide);
        }
    }
    @else {
        @error '$list must be a list of values.';
    }

    @return $values;
}

// Return the total number of cells for the row/column.
@function _total-cells($layout) {
    $total: 0;

    @if type-of($layout) == 'list' {
        $total: sum($layout);
    }
    @else if type-of($layout) == 'number' and unitless($layout) {
        $total: $layout;
    }

    @return $total;
}
  
// Select the specific cell to use
@function _select-cell($layout, $index: null) {
    $cell: null;

    @if type-of($layout) =='list' and $index {
        $cell: nth($layout, $index);
    }
    @else if type-of($layout) == 'number' {
        $cell: 1;
    }

    @return $cell;
}
  
// Determine if calc() output is required
@function _calc-required($cell, $gutter) {
    $required: false;

    // If we have a gutter, calc() is needed
    @if $gutter != 0 {
        $required: true;
    }

    // Auto sized cells dont need calc()
    @if $cell == 0 {
        $required: false;
    }

    @return $required;
}
